version: "3"
services:

  ############################################### EFK Stack ###############################################

  fluentd:
    build: ./fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
    container_name: fluentd
    links:
      - "elasticsearch"
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - efk_stack_network
    depends_on:
      - kafka1
      - kafka2
      - kafka3
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
    container_name: elasticsearch
    restart: always
    environment:
      - node.name=elasticsearch
      - cluster.name=docker-efk-stack-cluster
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - discovery.seed_hosts=elasticsearch
      - cluster.initial_master_nodes=elasticsearch
      - cluster.routing.allocation.disk.threshold_enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    expose:
      - "9200"
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      # nproc: 262144
      memlock:
        soft: -1
        hard: -1
    # volumes:
    #     - ./data/elasticsearch/elk1/logs:/var/log
    #     - ./data/elasticsearch/elk1/data:/usr/share/elasticsearch/data
    networks:
      - efk_stack_network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.1
    container_name: kibana
    environment:
        - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    links:
      - "elasticsearch"
    ports:
      - "5601:5601"
    networks:
      - efk_stack_network

  ############################################### Zookeeper Cluster ###############################################

  zoo1:
    image: confluentinc/cp-zookeeper
    container_name: zoo1
    hostname: zoo1
    restart: always
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181
      ZOO_LOG4J_PROP: /logs_dir
      ZOO_DATA_LOG_DIR: /data_logs_dir
    networks:
      - efk_stack_network
    # volumes: 
    #   - ./data/zookeeper/zoo1/zoo1-data:/data_logs_dir
    #   - ./data/zookeeper/zoo1/zoo1-log:/logs_dir

  zoo2:
    image: confluentinc/cp-zookeeper
    container_name: zoo2
    hostname: zoo2
    restart: always
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zoo3:2888:3888;2181
      ZOO_LOG4J_PROP: /logs_dir
      ZOO_DATA_LOG_DIR: /data_logs_dir
    networks:
      - efk_stack_network
    # volumes: 
    #   - ./data/zookeeper/zoo2/zoo2-data:/data_logs_dir
    #   - ./data/zookeeper/zoo2/zoo2-log:/logs_dir

  zoo3:
    image: confluentinc/cp-zookeeper
    container_name: zoo3
    hostname: zoo3
    restart: always
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181
      ZOO_LOG4J_PROP: /logs_dir
      ZOO_DATA_LOG_DIR: /data_logs_dir
    networks:
      - efk_stack_network
    # volumes: 
    #   - ./data/zookeeper/zoo3/zoo3-data:/data_logs_dir
    #   - ./data/zookeeper/zoo3/zoo3-log:/logs_dir




  ############################################### Kafka Cluster ###############################################

  kafka1:
    image: confluentinc/cp-kafka
    container_name: kafka1
    hostname: kafka1
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181,zoo3:2181"
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://:19092,LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_TOOLS_LOG4J_LOGLEVEL: "ERROR"
      KAFKA_JMX_PORT: 9101
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:19092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      # KAFKA_LOG_DIRS: "/var/local/kafka/data"
    # volumes:
    #   - ./data/kafka/kafka1:/kafka/kafka-logs
    restart: always
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      - efk_stack_network

  kafka2:
    image: confluentinc/cp-kafka
    container_name: kafka2
    hostname: kafka2
    ports:
      - 9093:9093
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181,zoo3:2181"
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://:19093,LISTENER_DOCKER_EXTERNAL://:9093
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_TOOLS_LOG4J_LOGLEVEL: "ERROR"
      KAFKA_JMX_PORT: 9101
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:19092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      # KAFKA_LOG_DIRS: "/var/local/kafka/data"
    # volumes:
    #   - ./data/kafka/kafka2:/kafka/kafka-logs
    depends_on:
      - zoo1
      - zoo2
      - zoo3  
    networks:
      - efk_stack_network 

  kafka3:
    image: confluentinc/cp-kafka
    container_name: kafka3
    hostname: kafka3
    ports:
      - 9094:9094
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181,zoo3:2181"
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://:19094,LISTENER_DOCKER_EXTERNAL://:9094
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_TOOLS_LOG4J_LOGLEVEL: "ERROR"
      KAFKA_JMX_PORT: 9101
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:19092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      # KAFKA_LOG_DIRS: "/var/local/kafka/data"
    # volumes:
    #   - ./data/kafka/kafka3:/kafka/kafka-logs
    depends_on:
      - zoo1
      - zoo2
      - zoo3  
    networks:
      - efk_stack_network

  kafka-create-topics:
    image: confluentinc/cp-server:6.2.1
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    hostname: kafka-create-topics
    command: ["bash", "./create-topics.sh"]
    working_dir: /scripts
    volumes:
      - ./scripts/kafka_scripts:/scripts
    networks:
      - efk_stack_network

  kafka_connect:
      container_name: kafka_connect
      build: ./kafka_connect
      depends_on:
        - kafka1
        - kafka2
        - kafka3
      links:
        - kafka1
        - kafka2
        - kafka3
      environment:
        CONNECT_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19093,kafka3:19094
        CONNECT_GROUP_ID: 1
        CONNECT_CONFIG_STORAGE_TOPIC: connect-config
        CONNECT_OFFSET_STORAGE_TOPIC: connect-offset
        CONNECT_STATUS_STORAGE_TOPIC: connect-status
        CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
        CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
        CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
        CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
        CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
        CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
        CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
        CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
        CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
        CONNECT_REST_ADVERTISED_HOST_NAME: localhost
        CONNECT_PLUGIN_PATH: "/usr/share/java,/opt/connectors"
      networks:
        - efk_stack_network

  kafka-connect-ui:
    container_name: kafka-connect-ui
    image: landoop/kafka-connect-ui:0.9.7
    hostname: kafka-connect-ui
    ports:
      - "8003:8000"
    environment:
      CONNECT_URL: "http://kafka_connect:8083/"
      PROXY: "true"
    depends_on:
      - kafka_connect
    networks:
      - efk_stack_network

  # schema-registry:
  #   image: confluentinc/cp-schema-registry
  #   container_name: schema-registry
  #   hostname: schema-registry
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: localhost:32181
  #     SCHEMA_REGISTRY_HOST_NAME: localhost
  #     SCHEMA_REGISTRY_LISTENERS: http://localhost:8081
 
  kafka_manager:
   image: hlebalbau/kafka-manager:stable
   ports:
     - "9000:9000"
   environment:
     ZK_HOSTS: "zoo1:2181,zoo2:2181,zoo3:2181"
     APPLICATION_SECRET: "random-secret"
   networks:
      - efk_stack_network  

  ############################################### Applications ###############################################

  web:
    image: httpd
    container_name: web
    ports:
      - "80:80"
    depends_on:
      - fluentd
    links:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: httpd.access
    networks:
      - efk_stack_network

  web2:
    image: httpd
    container_name: web2
    ports:
      - "81:80"
    depends_on:
      - fluentd
    links:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: httpd.access
    networks:
      - efk_stack_network

  web3:
    image: httpd
    container_name: web3
    ports:
      - "82:80"
    depends_on:
      - fluentd
    links:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: httpd.access
    networks:
      - efk_stack_network

  nodeServer:
    image: 311200/kafka-poc01
    container_name: nodeServer
    hostname: nodeServer
    ports: 
      - 5000:5000
    environment: 
      BROKER_LIST: "kafka1:19092,kafka2:19093,kafka3:19094"
    depends_on: 
      - kafka1
    networks:
      - efk_stack_network

networks:
  efk_stack_network: